define void :main () {
int64 %zero
%zero <- 1
return 
}

define int64[] :two-sum (int64[] %nums, int64 %target) {
  :entry
  int64 %ii
  int64 %length
  int64 %jj
  int64 %first_cond
  int64 %second_cond
  int64 %rhs
  int64 %check
  int64 %decoded_ii
  int64 %decoded_jj
  %ii <- 1
  %length <- length %nums 0

  :check1
  %first_cond <- %ii < %length
  br %first_cond :init :not_found

  :init
  %jj <- %ii + 2

  :check2
  %second_cond <- %jj < %length
  br %second_cond :loop :outer_loop

  :loop
  %decoded_ii <- call :decode(%ii)
  %decoded_jj <- call :decode(%jj)
  %rhs <- %target - %nums[%decoded_ii]
  %check <- nums[%decoded_jj] = %rhs
  br %check :done :cont

  :done 
  int64[] %result
  %result <- new Array(5)
  %result[0] <- %ii
  %result[1] <- %jj
  return %result

  :cont
  %jj <- %jj + 2
  br :check2

  :outer_loop
  %ii <- %ii + 2
  br :check1

  :not_found
  int64[] %result
  %result <- new Array(5)
  %result[0] <- 1
  %result[1] <- 1
  return result
}

define int64 :n_elements(int64[] %nums, int64 %n){
  :entry
  int64 %length
  int64 %is_length_zero
  %length <- length %nums 0
  %is_length_zero <- %length = 1
  br %is_length_zero :continue :no_val_found

  :contine
  int64 %count
  int64 %previous
  int64 %ii
  int64 %cond
  int64 %check
  int64 %decoded_ii
  int64 %end
  %ii <- 3
  %count <- 3
  %previous <- %nums[0]

  :check
  %cond <- %ii < %length
  br %cond :loop :no_val_found

  :loop
  %decoded_ii <- call :decode(%ii)
  %check <- previous = %nums[%decoded_ii]
  br %check :add_one :reset

  :add_one
  %count <- %count + 2
  br :n_check

  :reset
  %count <- 3
  %previous <- %nums[%decoded_ii]
  br :n_check

  :n_check
  %ii <- %ii + 2
  %end <- %count = %n
  br %end :done :loop

  :done
  return %nums[%decoded_ii]

  :no_val_found
  return 1
}

define int64 :add_array(int64[] %nums){
  :entry
  int64 %ii
  int64 %sum
  int64 %length
  int64 %decoded_ii
  int64 %cond
  %ii <- 1
  %length <- length %nums[0]

  :check
  %cond <- %ii < length
  br cond :loop done

  :loop
  %decoded_ii <- call :decode(%ii)
  %sum <- %sum + %nums[%decoded_ii]
  %ii <- %ii + 2
  br :check

  :done
  return %sum 
}

define int64 :decode(int64 %encoded){
  :entry
  int64 %d
  %d <- %encoded >> 1
  return %d
}

define int64 :encode (int64 %v){

  :entry
  %v <- %v << 1
  %v <- %v + 1
  return %v

}

define int64 :every(int64[] %nums){
  :entry
  int64 %ii
  int64 %and
  int64 %length
  int64 %decoded_ii
  int64 %cond
  %ii <- 1
  %length <- length %nums[0]

  :check
  %cond <- %ii < length
  br cond :loop done

  :loop
  %decoded_ii <- call :decode(%ii)
  %and <- %and & %nums[%decoded_ii]
  %ii <- %ii + 2
  br :check

  :done
  return %sum 
}

define int64[][][] :bigArray(){
  :entry
  int64[][][] %large
  %large <- new Array (7, 7, 7)
  %large[0][0][0] <- 1
  %large[0][0][1] <- 1
  %large[0][0][2] <- 1
  %large[0][1][0] <- 1
  %large[0][1][1] <- 1
  %large[0][1][2] <- 1
  %large[0][2][0] <- 1
  %large[0][2][1] <- 1
  %large[0][2][2] <- 1

  %large[1][0][0] <- 1
  %large[1][0][1] <- 1
  %large[1][0][2] <- 1
  %large[1][1][0] <- 1
  %large[1][1][1] <- 1
  %large[1][1][2] <- 1
  %large[1][2][0] <- 1
  %large[1][2][1] <- 1
  %large[1][2][2] <- 1

  %large[2][0][0] <- 1
  %large[2][0][1] <- 1
  %large[2][0][2] <- 1
  %large[2][1][0] <- 1
  %large[2][1][1] <- 1
  %large[2][1][2] <- 1
  %large[2][2][0] <- 1
  %large[2][2][1] <- 1
  %large[2][2][2] <- 1

  return %large
}